<refentry id="libgnomeprint-gnome-print-unit">
<refmeta>
<refentrytitle role="top_of_page" id="libgnomeprint-gnome-print-unit.top_of_page">gnome-print-unit</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEPRINT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-print-unit</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libgnomeprint-gnome-print-unit.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GnomePrintUnit">GnomePrintUnit</link>;
enum                <link linkend="GnomePrintUnitBase">GnomePrintUnitBase</link>;
#define             <link linkend="GNOME-PRINT-PS-UNIT--CAPS">GNOME_PRINT_PS_UNIT</link>
#define             <link linkend="GNOME-PRINT-UNITS-ALL--CAPS">GNOME_PRINT_UNITS_ALL</link>
const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * <link linkend="gnome-print-unit-get-identity">gnome_print_unit_get_identity</link>    (<link linkend="guint">guint</link> base);
const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * <link linkend="gnome-print-unit-get-default">gnome_print_unit_get_default</link>     (void);
const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * <link linkend="gnome-print-unit-get-by-name">gnome_print_unit_get_by_name</link>     (const <link linkend="guchar">guchar</link> *name);
const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * <link linkend="gnome-print-unit-get-by-abbreviation">gnome_print_unit_get_by_abbreviation</link>
                                                        (const <link linkend="guchar">guchar</link> *abbreviation);
<link linkend="GList">GList</link> *             <link linkend="gnome-print-unit-get-list">gnome_print_unit_get_list</link>           (<link linkend="guint">guint</link> bases);
<link linkend="void">void</link>                <link linkend="gnome-print-unit-free-list">gnome_print_unit_free_list</link>          (<link linkend="GList">GList</link> *units);
<link linkend="gboolean">gboolean</link>            <link linkend="gnome-print-convert-distance">gnome_print_convert_distance</link>        (<link linkend="gdouble">gdouble</link> *distance,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *from,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *to);
<link linkend="gboolean">gboolean</link>            <link linkend="gnome-print-convert-distance-full">gnome_print_convert_distance_full</link>   (<link linkend="gdouble">gdouble</link> *distance,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *from,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *to,
                                                         <link linkend="gdouble">gdouble</link> ctmscale,
                                                         <link linkend="gdouble">gdouble</link> devicescale);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libgnomeprint-gnome-print-unit.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="libgnomeprint-gnome-print-unit.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GnomePrintUnit" role="struct">
<title>GnomePrintUnit</title>
<indexterm zone="GnomePrintUnit"><primary sortas="GnomePrintUnit">GnomePrintUnit</primary></indexterm><programlisting>typedef struct {
	guint version : 8; /* Has to be 0 at moment */
	guint base : 8; /* Base */
	gdouble unittobase;
	/* I am not absolutely sure, but seems that gettext can do the magic */
	guchar *name;
	guchar *abbr;
	guchar *plural;
	guchar *abbr_plural;
} GnomePrintUnit;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GnomePrintUnitBase" role="enum">
<title>enum GnomePrintUnitBase</title>
<indexterm zone="GnomePrintUnitBase"><primary sortas="GnomePrintUnitBase">GnomePrintUnitBase</primary></indexterm><programlisting>typedef enum {
	GNOME_PRINT_UNIT_DIMENSIONLESS = (1 &lt;&lt; 0), /* For percentages and like */
	GNOME_PRINT_UNIT_ABSOLUTE = (1 &lt;&lt; 1),      /* Real world distances - i.e. mm, cm... */
	GNOME_PRINT_UNIT_DEVICE = (1 &lt;&lt; 2),        /* Semi-real device-dependent distances i.e. pixels */
	GNOME_PRINT_UNIT_USERSPACE = (1 &lt;&lt; 3)      /* Mathematical coordinates */
} GnomePrintUnitBase;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNOME-PRINT-PS-UNIT--CAPS" role="macro">
<title>GNOME_PRINT_PS_UNIT</title>
<indexterm zone="GNOME-PRINT-PS-UNIT--CAPS"><primary sortas="GNOME_PRINT_PS_UNIT">GNOME_PRINT_PS_UNIT</primary></indexterm><programlisting>#define GNOME_PRINT_PS_UNIT   (gnome_print_unit_get_identity (GNOME_PRINT_UNIT_ABSOLUTE))
</programlisting>
<para>
The <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> structure that represents the absolute units.
</para></refsect2>
<refsect2 id="GNOME-PRINT-UNITS-ALL--CAPS" role="macro">
<title>GNOME_PRINT_UNITS_ALL</title>
<indexterm zone="GNOME-PRINT-UNITS-ALL--CAPS"><primary sortas="GNOME_PRINT_UNITS_ALL">GNOME_PRINT_UNITS_ALL</primary></indexterm><programlisting>#define GNOME_PRINT_UNITS_ALL (GNOME_PRINT_UNIT_DIMENSIONLESS | GNOME_PRINT_UNIT_ABSOLUTE | GNOME_PRINT_UNIT_DEVICE | GNOME_PRINT_UNIT_USERSPACE)
</programlisting>
<para>
Convenience macro for all of the different GNOME_PRINT_UNIT_* macros.
</para></refsect2>
<refsect2 id="gnome-print-unit-get-identity" role="function">
<title>gnome_print_unit_get_identity ()</title>
<indexterm zone="gnome-print-unit-get-identity"><primary sortas="gnome_print_unit_get_identity">gnome_print_unit_get_identity</primary></indexterm><programlisting>const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * gnome_print_unit_get_identity    (<link linkend="guint">guint</link> base);</programlisting>
<para>
Retrieves the <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> structure referenced by base <parameter>base</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>base</parameter>&#160;:</term>
<listitem><simpara> The base of the <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> to retrieve
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> structure representing <parameter>base</parameter>. <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-unit-get-default" role="function">
<title>gnome_print_unit_get_default ()</title>
<indexterm zone="gnome-print-unit-get-default"><primary sortas="gnome_print_unit_get_default">gnome_print_unit_get_default</primary></indexterm><programlisting>const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * gnome_print_unit_get_default     (void);</programlisting>
<para>
Used to get the default <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the default <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link> structure

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-unit-get-by-name" role="function">
<title>gnome_print_unit_get_by_name ()</title>
<indexterm zone="gnome-print-unit-get-by-name"><primary sortas="gnome_print_unit_get_by_name">gnome_print_unit_get_by_name</primary></indexterm><programlisting>const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * gnome_print_unit_get_by_name     (const <link linkend="guchar">guchar</link> *name);</programlisting>
<para>
Get a unit based on its name, for example "Millimeter" or "Inches".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> Name of the unit, as a string pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A constant pointer to a <link linkend="GnomePrintUnit"><type>GnomePrintUnit</type></link>, <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-unit-get-by-abbreviation" role="function">
<title>gnome_print_unit_get_by_abbreviation ()</title>
<indexterm zone="gnome-print-unit-get-by-abbreviation"><primary sortas="gnome_print_unit_get_by_abbreviation">gnome_print_unit_get_by_abbreviation</primary></indexterm><programlisting>const <link linkend="GnomePrintUnit">GnomePrintUnit</link> * gnome_print_unit_get_by_abbreviation
                                                        (const <link linkend="guchar">guchar</link> *abbreviation);</programlisting>
<para>
Get a unit based on its abbreviation, for example "cm" "pts" or "in".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>abbreviation</parameter>&#160;:</term>
<listitem><simpara> Abbreviation of the unit, as a string pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A constant pointer to a GnomePrintUnit, <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-unit-get-list" role="function">
<title>gnome_print_unit_get_list ()</title>
<indexterm zone="gnome-print-unit-get-list"><primary sortas="gnome_print_unit_get_list">gnome_print_unit_get_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gnome_print_unit_get_list           (<link linkend="guint">guint</link> bases);</programlisting>
<para>
Gets a list of the units represented by the bases <parameter>bases</parameter>.  To get
a list of all units then use <link linkend="GNOME-PRINT-UNITS-ALL--CAPS"><type>GNOME_PRINT_UNITS_ALL</type></link>.  The list that
is returned should be freed using <link linkend="gnome-print-unit-free-list"><type>gnome_print_unit_free_list</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bases</parameter>&#160;:</term>
<listitem><simpara> The bases to include in the list
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to a <link linkend="GList"><type>GList</type></link>, <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-unit-free-list" role="function">
<title>gnome_print_unit_free_list ()</title>
<indexterm zone="gnome-print-unit-free-list"><primary sortas="gnome_print_unit_free_list">gnome_print_unit_free_list</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_print_unit_free_list          (<link linkend="GList">GList</link> *units);</programlisting>
<para>
Used to free the list of units created by <link linkend="gnome-print-unit-get-list"><type>gnome_print_unit_get_list</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>units</parameter>&#160;:</term>
<listitem><simpara> A pointer to a GList to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-convert-distance" role="function">
<title>gnome_print_convert_distance ()</title>
<indexterm zone="gnome-print-convert-distance"><primary sortas="gnome_print_convert_distance">gnome_print_convert_distance</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnome_print_convert_distance        (<link linkend="gdouble">gdouble</link> *distance,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *from,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *to);</programlisting>
<para>
Check whether a conversion between <parameter>from</parameter> and <parameter>to</parameter> can be made</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>distance</parameter>&#160;:</term>
<listitem><simpara> The distance to convert, and the converted value on success
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>from</parameter>&#160;:</term>
<listitem><simpara> Units to convert from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>to</parameter>&#160;:</term>
<listitem><simpara> Units to convert to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the conversion is possible, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if
         it is not or on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-print-convert-distance-full" role="function">
<title>gnome_print_convert_distance_full ()</title>
<indexterm zone="gnome-print-convert-distance-full"><primary sortas="gnome_print_convert_distance_full">gnome_print_convert_distance_full</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnome_print_convert_distance_full   (<link linkend="gdouble">gdouble</link> *distance,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *from,
                                                         const <link linkend="GnomePrintUnit">GnomePrintUnit</link> *to,
                                                         <link linkend="gdouble">gdouble</link> ctmscale,
                                                         <link linkend="gdouble">gdouble</link> devicescale);</programlisting>
<para>
Convert a distance from one unit to another.  You should supply a scale
as necessary.
</para>
<para>
ctmscale is userspace->absolute, devicescale is device->absolute</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>distance</parameter>&#160;:</term>
<listitem><simpara> The distance to convert, and the result on success
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>from</parameter>&#160;:</term>
<listitem><simpara> Units to convert from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>to</parameter>&#160;:</term>
<listitem><simpara> Units to convert to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctmscale</parameter>&#160;:</term>
<listitem><simpara> The userspace scale to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>devicescale</parameter>&#160;:</term>
<listitem><simpara> The device scale to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the conversion is possible, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if
         it is not or on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
