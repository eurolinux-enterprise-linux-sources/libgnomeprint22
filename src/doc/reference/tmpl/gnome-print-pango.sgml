<!-- ##### SECTION Title ##### -->
Pango Integration

<!-- ##### SECTION Short_Description ##### -->
Using gnome-print with Pango

<!-- ##### SECTION Long_Description ##### -->
<para>
The functions in this section allow you to use gnome-print to
draw text using the sophisticated layout and internationalization
capabilities of the Pango library. In general, for a GNOME
application, these are the text APIs you should be using.
</para>
<para>
There are a number of different types of objects involved in
using #Pango with gnome-print.
</para>
<variablelist>
  <varlistentry>
    <term><link linkend="PangoFontMap">PangoFontMap</link></term>
    <listitem>
      <para>
        A <link linkend="PangoFontMap">PangoFontMap</link> contains
        the information necessary to resolve abstract font names
        to particular fonts on the system. A font map appropriate
        for use with gnome-print is created using
<link
linkend="gnome-print-pango-font-map-new"><function>gnome_print_pango_font_map_new()</function></link>.
        Normally instead of creating a new font map, you can just
        use the global default font map returned by
<link
linkend="gnome-print-pango-get-default-font-map"><function>gnome_print_pango_get_default_font_map()</function></link>.
        The only exception to this is if you need to use lower level
        Pango APIs to customize how the font name to font lookup is
        done, since modifying the global default font map isn't allowed.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><link linkend="PangoContext">PangoContext</link></term>
    <listitem>
      <para>
        Information about doing layout for a particular output device
        with a particular set of options is
        encapsulated into a <link
        linkend="PangoContext">PangoContext</link>. Contexts for
        gnome-print are created using
        <link
linkend="gnome-print-pango-create-context"><function>gnome_print_pango_create_context()</function></link>
      </para>
      <para>
        A Pango context created in this way is not specific to a
        particular <link
        linkend="GnomePrintContext">GnomePrintContext</link> but
        before using a Pango context to do layout for a gnome-print
        context, it's necessary to call
        <link
linkend="gnome-print-pango-update-context"><function>gnome_print_pango_update_context()</function></link>.
        This function also needs to be called if when the current
        transformation matrix changes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><link linkend="PangoLayout">PangoLayout</link></term>
    <listitem>
      <para>
        A <link linkend="PangoLayout">PangoLayout</link> holds one or more paragraphs of text
        and encapsulates all the necessary logic needed to
        line wrap and lay out the text. Once you have a 
        #PangoContext, you can create a layout using
        <link linkend="pango_layout_new"><function>pango_layout_new()</function></link>.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
<para>
In the normal case, a <link linkend="PangoFontMap">PangoFontMap</link>
created directly with <link
linkend="gnome-print-pango-create-layout"><function>gnome_print_pango_create_layout()</function></link>
is all that is needed. A simple example that uses Pango to draw a string centered
in a page looks like:
</para>

<informalexample><programlisting>
static void
draw_hello_world (GnomePrintContext *gpc,
                  double             page_width,
                  double             page_height)
{
  PangoLayout *layout = gnome_print_pango_create_layout (gpc);
  int pango_width, pango_height;
  double width, height;

  pango_layout_set_text (layout, "Hello World");

  pango_layout_get_size (layout, &amp;pango_width, &amp;pango_height);
  width = (double) pango_width / PANGO_SCALE;
  height = (double) pango_height / PANGO_SCALE;

  gnome_print_moveto (gpc,
	             (page_width - width) / 2,
                     (page_width - height)/ 2);
  gnome_print_pango_layout (gpc, layout);

  g_object_unref (layout);
}
</programlisting></informalexample>

<para>
Note the need to convert from Pango units to the floating point
units that gnome-print uses by dividing by
<link linkend="PANGO-SCALE-CAPS"><literal>PANGO_SCALE</literal></link>.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### FUNCTION gnome_print_pango_font_map_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gnome_print_pango_get_default_font_map ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gnome_print_pango_create_context ##### -->
<para>

</para>

@fontmap: 
@Returns: 


<!-- ##### FUNCTION gnome_print_pango_update_context ##### -->
<para>

</para>

@context: 
@gpc: 


<!-- ##### FUNCTION gnome_print_pango_create_layout ##### -->
<para>

</para>

@gpc: 
@Returns: 


<!-- ##### FUNCTION gnome_print_pango_glyph_string ##### -->
<para>

</para>

@gpc: 
@font: 
@glyphs: 


<!-- ##### FUNCTION gnome_print_pango_layout_line ##### -->
<para>

</para>

@gpc: 
@line: 


<!-- ##### FUNCTION gnome_print_pango_layout ##### -->
<para>

</para>

@gpc: 
@layout: 


<!-- ##### FUNCTION gnome_print_pango_layout_print ##### -->
<para>

</para>

@gpc: 
@pl: 


